// include

# include "socket.h"
# include "wizchip_conf.h"
# include "w5500.h"
# include "loopback.h"
# include <stdio.h>

Direct printf to uart

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

setbuf(stdout, NULL);

# define HTTP_SOCKET     0
# define PORT_TCPS		    5000
# define DATA_BUF_SIZE   2048
uint8_t gDATABUF[DATA_BUF_SIZE];

int8_t stat;
uint8_t reqnr;
char Message[128];

# define LISTEN_PORT 5000
# define RECEIVE_BUFF_SIZE 128
uint8_t receive_buff[RECEIVE_BUFF_SIZE];

wiz_NetInfo gWIZNETINFO = {
		.mac = { 0x80, 0x34, 0x28, 0x74, 0xA5, 0xCB },//MSB - LSB
		.ip ={ 192, 168, 1, 35 },
		.sn = { 255, 255, 255, 0 },
		.gw ={ 192, 168, 1, 1 },
		.dns = { 8, 8, 8, 8 },
		.dhcp = NETINFO_STATIC };

uint8_t destination_ip[]={192,168,1,135};
uint16_t destination_port=5000;

void W5500_Select(void)
{
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
}

void W5500_Unselect(void)
{
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
}

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
}

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
}

uint8_t W5500_ReadByte(void)
{
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
    return byte;
}

void W5500_WriteByte(uint8_t byte)
{
    W5500_WriteBuff(&byte, sizeof(byte));
}

static void PHYStatusCheck(void);
static void PrintPHYConf(void);

printf("My First W5500 Application!\r\n");

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
  	HAL_Delay(1);
  	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
  	HAL_Delay(1000);

  	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
      reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
      reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);

  	uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
  	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
      wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);

      wizchip_setnetinfo(&gWIZNETINFO);

  	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
  	HAL_Delay(1000);
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
		printf("WIZCHIP Initialized Failed.\r\n");
		while (1);
	}
	printf("WIZCHIP Initialization Success.\r\n");
	PHYStatusCheck();
	PrintPHYConf();
	 if(socket(1, Sn_MR_TCP, 0, 0)==1)
	  {
		  printf("\r\nSocket Created Successfully");
	  }
	  else
	  {
		  printf("\r\nCannot create socket");
		  while(1);
	  }
//	 printf("\r\nConnecting to server: %d.%d.%d.%d @ TCP Port: %d",destination_ip[0],destination_ip[1],destination_ip[2],destination_ip[3],destination_port);
//	   if(connect(1, destination_ip, destination_port)==SOCK_OK)
//	   {
//	 	  printf("\r\nConnected with server.");
//	   }
//	   else
//	   {
//	 	  //failed
//	 	  printf("\r\nCannot connect with server!");
//
//	   }

printf("\r\nInitializing server socket\r\n");

	  	  //Parameters in order socket_id, protocol TCP or UDP, Port number, Flags=0
	  	  //Return value is socket ID on success
	  	  if(socket(1,Sn_MR_TCP,LISTEN_PORT,0)!=1)
	  	  {
	  		  //error
	  		  printf("Cannot create Socket!\r\n");
	  		  while(1);//halt here
	  	  }

	  	  //success
	  	  printf("Socket Created Successfully ! \r\n");

	  	  uint8_t socket_io_mode=SOCK_IO_BLOCK;

	  	  ctlsocket(1, CS_SET_IOMODE , &socket_io_mode);//set blocking IO mode

	  	  printf("Start listening on port %d ! \r\n",LISTEN_PORT);
	  	  printf("Waiting for a client connection. \r\n");

	  	  //Make it a passive socket (i.e. listen for connection)
	  	  if(listen(1)!=SOCK_OK)//our socket id is 1 (w5500 have 8 sockets from 0-7)
	  	  {
	  		  //error
	  		  printf("Cannot listen on port %d",LISTEN_PORT);

	  		  while(1);

	  	  }

	  	  uint8_t sr=0x00;//socket status register

	  	  do
	  	  {
	  		  sr=getSn_SR(1);//read status reg (SR of socket 1)
	  	  }while (sr!=0x17 && sr!=0x00);

	  	  if(sr==0x00)
	  	  {
	  		  printf("Some error occurred on server socket. Please restart.\r\n");
	  		  while(1);
	  	  }

	  	  if(sr==0x17)
	  	  {
	  		  //we come here only when a client has connected.
	  		  //Now we can read data from the socket
	  		  printf("A client connected!\r\n");
	  		  printf("Waiting for Client Data ...!\r\n");

	  		  while(1)
	  		  {
	  			  int len=recv(1, receive_buff, RECEIVE_BUFF_SIZE);

	  			  if(len==SOCKERR_SOCKSTATUS)
	  			  {
	  				  //client has disconnected
	  				  printf("Client has disconnected\r\n");
	  				  printf("*** SESSION OVER ***\r\n\r\n");
	  				  break;
	  			  }

	  			  receive_buff[len]='\0';

	  			  printf("Received %d bytes from client\r\n",len);
	  			  printf("Data Received: %s", receive_buff);

	  			  //Echo the data back encloused in a [] pair
	  			  send(1,(uint8_t*)"[",1);//starting sq bracket
	  			  send(1,receive_buff,len);// the data
	  			  send(1,(uint8_t*)"]",1);//closing sq bracket

	  			  printf("\r\nECHO sent back to client\r\n");

	  			  //Look for quit message and quit if received
	  			  if(strcmp((char*)receive_buff,"QUIT")==0)
	  			  {
	  				  printf("Received QUIT command from client\r\n");
	  				  printf("Disconnecting ... \r\n");
	  				  printf("*** SESSION OVER ***\r\n\r\n");
	  				  disconnect(1);//disconnect from the clinet
	  				  break;//come out of while loop
	  			  }

	  		  }//While loop (as long as client is connected)

	  	  }
//	  if(send(1, "Thanhdeptry!\r\n", 16)<=SOCK_ERROR)
//	  	  {
//	  		  printf("\r\nSending Failed!");
//
//	  	  }
//	  	  else
//	  	  {
//	  		  printf("\r\nSending Success!");
//	  	  }
//
//	  	  HAL_Delay(1000);
	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
	  	HAL_Delay(1000);

PUTCHAR_PROTOTYPE
{
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
}
void PHYStatusCheck(void)
{
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);

		if(tmp == PHY_LINK_OFF)
		{
			printf("NO Cable Connected!");
			HAL_Delay(1500);
		}
	}while(tmp == PHY_LINK_OFF);

	printf("Good! Cable got connected!");

}

void PrintPHYConf(void)
{
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);

	if(phyconf.by==PHY_CONFBY_HW)
	{
		printf("\n\rPHY Configured by Hardware Pins");
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
	{
		printf("\n\rAutonegotiation Enabled");
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
	{
		printf("\n\rDuplex Mode: Full");
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
	}

	if(phyconf.speed==PHY_SPEED_10)
	{
		printf("\n\rSpeed: 10Mbps");
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
